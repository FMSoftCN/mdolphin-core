/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSElementTimeControl.h"

#include "ElementTimeControl.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSElementTimeControl);

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSElementTimeControlPrototypeTableValues[5] =
{
    { "beginElement", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsElementTimeControlPrototypeFunctionBeginElement), (intptr_t)0 THUNK_GENERATOR(0) },
    { "beginElementAt", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsElementTimeControlPrototypeFunctionBeginElementAt), (intptr_t)1 THUNK_GENERATOR(0) },
    { "endElement", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsElementTimeControlPrototypeFunctionEndElement), (intptr_t)0 THUNK_GENERATOR(0) },
    { "endElementAt", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsElementTimeControlPrototypeFunctionEndElementAt), (intptr_t)1 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSElementTimeControlPrototypeTable = { 9, 7, JSElementTimeControlPrototypeTableValues, 0 };
const ClassInfo JSElementTimeControlPrototype::s_info = { "ElementTimeControlPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSElementTimeControlPrototypeTable, 0 };

JSObject* JSElementTimeControlPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSElementTimeControl>(exec, globalObject);
}

bool JSElementTimeControlPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSElementTimeControlPrototypeTable, this, propertyName, slot);
}

bool JSElementTimeControlPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, &JSElementTimeControlPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSElementTimeControl::s_info = { "ElementTimeControl", &DOMObjectWithGlobalPointer::s_info, 0, 0 };

JSElementTimeControl::JSElementTimeControl(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<ElementTimeControl> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSElementTimeControl::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSElementTimeControlPrototype(globalObject, JSElementTimeControlPrototype::createStructure(globalObject->globalData(), globalObject->objectPrototype()));
}

EncodedJSValue JSC_HOST_CALL jsElementTimeControlPrototypeFunctionBeginElement(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSElementTimeControl::s_info))
        return throwVMTypeError(exec);
    JSElementTimeControl* castedThis = static_cast<JSElementTimeControl*>(asObject(thisValue));
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThis->impl());

    imp->beginElement();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsElementTimeControlPrototypeFunctionBeginElementAt(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSElementTimeControl::s_info))
        return throwVMTypeError(exec);
    JSElementTimeControl* castedThis = static_cast<JSElementTimeControl*>(asObject(thisValue));
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThis->impl());
    float offset(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    imp->beginElementAt(offset);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsElementTimeControlPrototypeFunctionEndElement(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSElementTimeControl::s_info))
        return throwVMTypeError(exec);
    JSElementTimeControl* castedThis = static_cast<JSElementTimeControl*>(asObject(thisValue));
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThis->impl());

    imp->endElement();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsElementTimeControlPrototypeFunctionEndElementAt(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSElementTimeControl::s_info))
        return throwVMTypeError(exec);
    JSElementTimeControl* castedThis = static_cast<JSElementTimeControl*>(asObject(thisValue));
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThis->impl());
    float offset(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    imp->endElementAt(offset);
    return JSValue::encode(jsUndefined());
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, ElementTimeControl* object)
{
    return getDOMObjectWrapper<JSElementTimeControl>(exec, globalObject, object);
}
ElementTimeControl* toElementTimeControl(JSC::JSValue value)
{
    return value.inherits(&JSElementTimeControl::s_info) ? static_cast<JSElementTimeControl*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SVG)
