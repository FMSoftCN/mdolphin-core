/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILE_SYSTEM)

#include "JSFileWriterSync.h"

#include "ExceptionCode.h"
#include "FileWriterSync.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <runtime/JSNumberCell.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSFileWriterSync);

/* Hash table */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSFileWriterSyncTableValues[4] =
{
    { "position", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileWriterSyncPosition), (intptr_t)0 THUNK_GENERATOR(0) },
    { "length", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileWriterSyncLength), (intptr_t)0 THUNK_GENERATOR(0) },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileWriterSyncConstructor), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSFileWriterSyncTable = { 9, 7, JSFileWriterSyncTableValues, 0 };
/* Hash table for constructor */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSFileWriterSyncConstructorTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSFileWriterSyncConstructorTable = { 1, 0, JSFileWriterSyncConstructorTableValues, 0 };
class JSFileWriterSyncConstructor : public DOMConstructorObject {
public:
    JSFileWriterSyncConstructor(JSC::ExecState*, JSDOMGlobalObject*);

    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    virtual bool getOwnPropertyDescriptor(JSC::ExecState*, const JSC::Identifier&, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;
    static PassRefPtr<JSC::Structure> createStructure(JSC::JSGlobalData& globalData, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), AnonymousSlotCount, &s_info);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

const ClassInfo JSFileWriterSyncConstructor::s_info = { "FileWriterSyncConstructor", &DOMConstructorObject::s_info, &JSFileWriterSyncConstructorTable, 0 };

JSFileWriterSyncConstructor::JSFileWriterSyncConstructor(ExecState* exec, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(JSFileWriterSyncConstructor::createStructure(globalObject->globalData(), globalObject->objectPrototype()), globalObject)
{
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSFileWriterSyncPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSFileWriterSyncConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSFileWriterSyncConstructor, DOMObject>(exec, &JSFileWriterSyncConstructorTable, this, propertyName, slot);
}

bool JSFileWriterSyncConstructor::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSFileWriterSyncConstructor, DOMObject>(exec, &JSFileWriterSyncConstructorTable, this, propertyName, descriptor);
}

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSFileWriterSyncPrototypeTableValues[4] =
{
    { "write", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsFileWriterSyncPrototypeFunctionWrite), (intptr_t)1 THUNK_GENERATOR(0) },
    { "seek", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsFileWriterSyncPrototypeFunctionSeek), (intptr_t)1 THUNK_GENERATOR(0) },
    { "truncate", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsFileWriterSyncPrototypeFunctionTruncate), (intptr_t)1 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSFileWriterSyncPrototypeTable = { 8, 7, JSFileWriterSyncPrototypeTableValues, 0 };
const ClassInfo JSFileWriterSyncPrototype::s_info = { "FileWriterSyncPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSFileWriterSyncPrototypeTable, 0 };

JSObject* JSFileWriterSyncPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFileWriterSync>(exec, globalObject);
}

bool JSFileWriterSyncPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSFileWriterSyncPrototypeTable, this, propertyName, slot);
}

bool JSFileWriterSyncPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, &JSFileWriterSyncPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSFileWriterSync::s_info = { "FileWriterSync", &DOMObjectWithGlobalPointer::s_info, &JSFileWriterSyncTable, 0 };

JSFileWriterSync::JSFileWriterSync(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<FileWriterSync> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSFileWriterSync::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSFileWriterSyncPrototype(globalObject, JSFileWriterSyncPrototype::createStructure(globalObject->globalData(), globalObject->objectPrototype()));
}

bool JSFileWriterSync::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSFileWriterSync, Base>(exec, &JSFileWriterSyncTable, this, propertyName, slot);
}

bool JSFileWriterSync::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSFileWriterSync, Base>(exec, &JSFileWriterSyncTable, this, propertyName, descriptor);
}

JSValue jsFileWriterSyncPosition(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFileWriterSync* castedThis = static_cast<JSFileWriterSync*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    FileWriterSync* imp = static_cast<FileWriterSync*>(castedThis->impl());
    JSValue result = jsNumber(imp->position());
    return result;
}

JSValue jsFileWriterSyncLength(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFileWriterSync* castedThis = static_cast<JSFileWriterSync*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    FileWriterSync* imp = static_cast<FileWriterSync*>(castedThis->impl());
    JSValue result = jsNumber(imp->length());
    return result;
}

JSValue jsFileWriterSyncConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFileWriterSync* domObject = static_cast<JSFileWriterSync*>(asObject(slotBase));
    return JSFileWriterSync::getConstructor(exec, domObject->globalObject());
}

JSValue JSFileWriterSync::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileWriterSyncConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsFileWriterSyncPrototypeFunctionWrite(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileWriterSync::s_info))
        return throwVMTypeError(exec);
    JSFileWriterSync* castedThis = static_cast<JSFileWriterSync*>(asObject(thisValue));
    FileWriterSync* imp = static_cast<FileWriterSync*>(castedThis->impl());
    ExceptionCode ec = 0;
    Blob* data(toBlob(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    imp->write(data, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFileWriterSyncPrototypeFunctionSeek(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileWriterSync::s_info))
        return throwVMTypeError(exec);
    JSFileWriterSync* castedThis = static_cast<JSFileWriterSync*>(asObject(thisValue));
    FileWriterSync* imp = static_cast<FileWriterSync*>(castedThis->impl());
    ExceptionCode ec = 0;
    long long position(static_cast<long long>(exec->argument(0).toInteger(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    imp->seek(position, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFileWriterSyncPrototypeFunctionTruncate(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileWriterSync::s_info))
        return throwVMTypeError(exec);
    JSFileWriterSync* castedThis = static_cast<JSFileWriterSync*>(asObject(thisValue));
    FileWriterSync* imp = static_cast<FileWriterSync*>(castedThis->impl());
    ExceptionCode ec = 0;
    long long size(static_cast<long long>(exec->argument(0).toInteger(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    imp->truncate(size, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, FileWriterSync* object)
{
    return getDOMObjectWrapper<JSFileWriterSync>(exec, globalObject, object);
}
FileWriterSync* toFileWriterSync(JSC::JSValue value)
{
    return value.inherits(&JSFileWriterSync::s_info) ? static_cast<JSFileWriterSync*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(FILE_SYSTEM)
