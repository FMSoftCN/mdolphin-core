/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSSVGFilterPrimitiveStandardAttributes.h"

#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "SVGFilterPrimitiveStandardAttributes.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFilterPrimitiveStandardAttributes);

/* Hash table */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSSVGFilterPrimitiveStandardAttributesTableValues[7] =
{
    { "x", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesX), (intptr_t)0 THUNK_GENERATOR(0) },
    { "y", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesY), (intptr_t)0 THUNK_GENERATOR(0) },
    { "width", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesWidth), (intptr_t)0 THUNK_GENERATOR(0) },
    { "height", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesHeight), (intptr_t)0 THUNK_GENERATOR(0) },
    { "result", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesResult), (intptr_t)0 THUNK_GENERATOR(0) },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFilterPrimitiveStandardAttributesConstructor), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSSVGFilterPrimitiveStandardAttributesTable = { 17, 15, JSSVGFilterPrimitiveStandardAttributesTableValues, 0 };
/* Hash table for constructor */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSSVGFilterPrimitiveStandardAttributesConstructorTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSSVGFilterPrimitiveStandardAttributesConstructorTable = { 1, 0, JSSVGFilterPrimitiveStandardAttributesConstructorTableValues, 0 };
class JSSVGFilterPrimitiveStandardAttributesConstructor : public DOMConstructorObject {
public:
    JSSVGFilterPrimitiveStandardAttributesConstructor(JSC::ExecState*, JSDOMGlobalObject*);

    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    virtual bool getOwnPropertyDescriptor(JSC::ExecState*, const JSC::Identifier&, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;
    static PassRefPtr<JSC::Structure> createStructure(JSC::JSGlobalData& globalData, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), AnonymousSlotCount, &s_info);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

const ClassInfo JSSVGFilterPrimitiveStandardAttributesConstructor::s_info = { "SVGFilterPrimitiveStandardAttributesConstructor", &DOMConstructorObject::s_info, &JSSVGFilterPrimitiveStandardAttributesConstructorTable, 0 };

JSSVGFilterPrimitiveStandardAttributesConstructor::JSSVGFilterPrimitiveStandardAttributesConstructor(ExecState* exec, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(JSSVGFilterPrimitiveStandardAttributesConstructor::createStructure(globalObject->globalData(), globalObject->objectPrototype()), globalObject)
{
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSSVGFilterPrimitiveStandardAttributesPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSSVGFilterPrimitiveStandardAttributesConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFilterPrimitiveStandardAttributesConstructor, DOMObject>(exec, &JSSVGFilterPrimitiveStandardAttributesConstructorTable, this, propertyName, slot);
}

bool JSSVGFilterPrimitiveStandardAttributesConstructor::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGFilterPrimitiveStandardAttributesConstructor, DOMObject>(exec, &JSSVGFilterPrimitiveStandardAttributesConstructorTable, this, propertyName, descriptor);
}

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSSVGFilterPrimitiveStandardAttributesPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSSVGFilterPrimitiveStandardAttributesPrototypeTable = { 1, 0, JSSVGFilterPrimitiveStandardAttributesPrototypeTableValues, 0 };
const ClassInfo JSSVGFilterPrimitiveStandardAttributesPrototype::s_info = { "SVGFilterPrimitiveStandardAttributesPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSSVGFilterPrimitiveStandardAttributesPrototypeTable, 0 };

JSObject* JSSVGFilterPrimitiveStandardAttributesPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFilterPrimitiveStandardAttributes>(exec, globalObject);
}

const ClassInfo JSSVGFilterPrimitiveStandardAttributes::s_info = { "SVGFilterPrimitiveStandardAttributes", &JSSVGStylable::s_info, &JSSVGFilterPrimitiveStandardAttributesTable, 0 };

JSSVGFilterPrimitiveStandardAttributes::JSSVGFilterPrimitiveStandardAttributes(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGFilterPrimitiveStandardAttributes> impl)
    : JSSVGStylable(structure, globalObject, impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSSVGFilterPrimitiveStandardAttributes::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSSVGFilterPrimitiveStandardAttributesPrototype(globalObject, JSSVGFilterPrimitiveStandardAttributesPrototype::createStructure(exec->globalData(), JSSVGStylablePrototype::self(exec, globalObject)));
}

bool JSSVGFilterPrimitiveStandardAttributes::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFilterPrimitiveStandardAttributes, Base>(exec, &JSSVGFilterPrimitiveStandardAttributesTable, this, propertyName, slot);
}

bool JSSVGFilterPrimitiveStandardAttributes::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGFilterPrimitiveStandardAttributes, Base>(exec, &JSSVGFilterPrimitiveStandardAttributesTable, this, propertyName, descriptor);
}

JSValue jsSVGFilterPrimitiveStandardAttributesX(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* castedThis = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(castedThis->impl());
    RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

JSValue jsSVGFilterPrimitiveStandardAttributesY(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* castedThis = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(castedThis->impl());
    RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

JSValue jsSVGFilterPrimitiveStandardAttributesWidth(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* castedThis = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(castedThis->impl());
    RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

JSValue jsSVGFilterPrimitiveStandardAttributesHeight(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* castedThis = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(castedThis->impl());
    RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

JSValue jsSVGFilterPrimitiveStandardAttributesResult(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* castedThis = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(castedThis->impl());
    RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

JSValue jsSVGFilterPrimitiveStandardAttributesConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGFilterPrimitiveStandardAttributes* domObject = static_cast<JSSVGFilterPrimitiveStandardAttributes*>(asObject(slotBase));
    return JSSVGFilterPrimitiveStandardAttributes::getConstructor(exec, domObject->globalObject());
}

JSValue JSSVGFilterPrimitiveStandardAttributes::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFilterPrimitiveStandardAttributesConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(SVG)
