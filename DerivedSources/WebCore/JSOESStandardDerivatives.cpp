/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSOESStandardDerivatives.h"

#include "OESStandardDerivatives.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSOESStandardDerivatives);

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSOESStandardDerivativesPrototypeTableValues[2] =
{
    { "FRAGMENT_SHADER_DERIVATIVE_HINT_OES", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsOESStandardDerivativesFRAGMENT_SHADER_DERIVATIVE_HINT_OES), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSOESStandardDerivativesPrototypeTable = { 2, 1, JSOESStandardDerivativesPrototypeTableValues, 0 };
const ClassInfo JSOESStandardDerivativesPrototype::s_info = { "OESStandardDerivativesPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSOESStandardDerivativesPrototypeTable, 0 };

JSObject* JSOESStandardDerivativesPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSOESStandardDerivatives>(exec, globalObject);
}

bool JSOESStandardDerivativesPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSOESStandardDerivativesPrototype, JSObject>(exec, &JSOESStandardDerivativesPrototypeTable, this, propertyName, slot);
}

bool JSOESStandardDerivativesPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSOESStandardDerivativesPrototype, JSObject>(exec, &JSOESStandardDerivativesPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSOESStandardDerivatives::s_info = { "OESStandardDerivatives", &DOMObjectWithGlobalPointer::s_info, 0, 0 };

JSOESStandardDerivatives::JSOESStandardDerivatives(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<OESStandardDerivatives> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSOESStandardDerivatives::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSOESStandardDerivativesPrototype(globalObject, JSOESStandardDerivativesPrototype::createStructure(globalObject->globalData(), globalObject->objectPrototype()));
}

// Constant getters

JSValue jsOESStandardDerivativesFRAGMENT_SHADER_DERIVATIVE_HINT_OES(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x8B8B));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, OESStandardDerivatives* object)
{
    return getDOMObjectWrapper<JSOESStandardDerivatives>(exec, globalObject, object);
}
OESStandardDerivatives* toOESStandardDerivatives(JSC::JSValue value)
{
    return value.inherits(&JSOESStandardDerivatives::s_info) ? static_cast<JSOESStandardDerivatives*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(WEBGL)
