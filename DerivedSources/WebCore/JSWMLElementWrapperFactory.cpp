/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "JSWMLElementWrapperFactory.h"

#if ENABLE(WML)

#include "JSWMLAElement.h"
#include "JSWMLAccessElement.h"
#include "JSWMLAnchorElement.h"
#include "JSWMLBRElement.h"
#include "JSWMLCardElement.h"
#include "JSWMLDoElement.h"
#include "JSWMLFieldSetElement.h"
#include "JSWMLGoElement.h"
#include "JSWMLImageElement.h"
#include "JSWMLInputElement.h"
#include "JSWMLInsertedLegendElement.h"
#include "JSWMLMetaElement.h"
#include "JSWMLNoopElement.h"
#include "JSWMLOnEventElement.h"
#include "JSWMLOptGroupElement.h"
#include "JSWMLOptionElement.h"
#include "JSWMLPElement.h"
#include "JSWMLPostfieldElement.h"
#include "JSWMLPrevElement.h"
#include "JSWMLRefreshElement.h"
#include "JSWMLSelectElement.h"
#include "JSWMLSetvarElement.h"
#include "JSWMLTableElement.h"
#include "JSWMLTemplateElement.h"
#include "JSWMLTimerElement.h"

#include "WMLNames.h"

#include "WMLAElement.h"
#include "WMLAccessElement.h"
#include "WMLAnchorElement.h"
#include "WMLBRElement.h"
#include "WMLCardElement.h"
#include "WMLDoElement.h"
#include "WMLFieldSetElement.h"
#include "WMLGoElement.h"
#include "WMLElement.h"
#include "WMLImageElement.h"
#include "WMLInputElement.h"
#include "WMLInsertedLegendElement.h"
#include "WMLMetaElement.h"
#include "WMLNoopElement.h"
#include "WMLOnEventElement.h"
#include "WMLOptGroupElement.h"
#include "WMLOptionElement.h"
#include "WMLPElement.h"
#include "WMLPostfieldElement.h"
#include "WMLPrevElement.h"
#include "WMLRefreshElement.h"
#include "WMLSelectElement.h"
#include "WMLSetvarElement.h"
#include "WMLTableElement.h"
#include "WMLTemplateElement.h"
#include "WMLTimerElement.h"
#include <wtf/StdLibExtras.h>

#if ENABLE(VIDEO)
#include "Document.h"
#include "Settings.h"
#endif

using namespace JSC;

namespace WebCore {

using namespace WMLNames;

typedef JSNode* (*CreateWMLElementWrapperFunction)(ExecState*, JSDOMGlobalObject*, PassRefPtr<WMLElement>);

static JSNode* createWMLAElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLAElement, element.get());
}

static JSNode* createWMLAccessElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLAccessElement, element.get());
}

static JSNode* createWMLAnchorElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLAnchorElement, element.get());
}

static JSNode* createWMLBRElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLBRElement, element.get());
}

static JSNode* createWMLCardElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLCardElement, element.get());
}

static JSNode* createWMLDoElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLDoElement, element.get());
}

static JSNode* createWMLFieldSetElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLFieldSetElement, element.get());
}

static JSNode* createWMLGoElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLGoElement, element.get());
}

static JSNode* createWMLImageElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLImageElement, element.get());
}

static JSNode* createWMLInputElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLInputElement, element.get());
}

static JSNode* createWMLInsertedLegendElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLInsertedLegendElement, element.get());
}

static JSNode* createWMLMetaElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLMetaElement, element.get());
}

static JSNode* createWMLNoopElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLNoopElement, element.get());
}

static JSNode* createWMLOnEventElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLOnEventElement, element.get());
}

static JSNode* createWMLOptGroupElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLOptGroupElement, element.get());
}

static JSNode* createWMLOptionElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLOptionElement, element.get());
}

static JSNode* createWMLPElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLPElement, element.get());
}

static JSNode* createWMLPostfieldElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLPostfieldElement, element.get());
}

static JSNode* createWMLPrevElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLPrevElement, element.get());
}

static JSNode* createWMLRefreshElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLRefreshElement, element.get());
}

static JSNode* createWMLSelectElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLSelectElement, element.get());
}

static JSNode* createWMLSetvarElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLSetvarElement, element.get());
}

static JSNode* createWMLTableElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLTableElement, element.get());
}

static JSNode* createWMLTemplateElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLTemplateElement, element.get());
}

static JSNode* createWMLTimerElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLTimerElement, element.get());
}

JSNode* createJSWMLWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<WMLElement> element)
{
    typedef HashMap<WTF::AtomicStringImpl*, CreateWMLElementWrapperFunction> FunctionMap;
    DEFINE_STATIC_LOCAL(FunctionMap, map, ());
    if (map.isEmpty()) {
       map.set(aTag.localName().impl(), createWMLAElementWrapper);
       map.set(accessTag.localName().impl(), createWMLAccessElementWrapper);
       map.set(anchorTag.localName().impl(), createWMLAnchorElementWrapper);
       map.set(brTag.localName().impl(), createWMLBRElementWrapper);
       map.set(cardTag.localName().impl(), createWMLCardElementWrapper);
       map.set(doTag.localName().impl(), createWMLDoElementWrapper);
       map.set(fieldsetTag.localName().impl(), createWMLFieldSetElementWrapper);
       map.set(goTag.localName().impl(), createWMLGoElementWrapper);
       map.set(imgTag.localName().impl(), createWMLImageElementWrapper);
       map.set(inputTag.localName().impl(), createWMLInputElementWrapper);
       map.set(insertedLegendTag.localName().impl(), createWMLInsertedLegendElementWrapper);
       map.set(metaTag.localName().impl(), createWMLMetaElementWrapper);
       map.set(noopTag.localName().impl(), createWMLNoopElementWrapper);
       map.set(oneventTag.localName().impl(), createWMLOnEventElementWrapper);
       map.set(optgroupTag.localName().impl(), createWMLOptGroupElementWrapper);
       map.set(optionTag.localName().impl(), createWMLOptionElementWrapper);
       map.set(pTag.localName().impl(), createWMLPElementWrapper);
       map.set(postfieldTag.localName().impl(), createWMLPostfieldElementWrapper);
       map.set(prevTag.localName().impl(), createWMLPrevElementWrapper);
       map.set(refreshTag.localName().impl(), createWMLRefreshElementWrapper);
       map.set(selectTag.localName().impl(), createWMLSelectElementWrapper);
       map.set(setvarTag.localName().impl(), createWMLSetvarElementWrapper);
       map.set(tableTag.localName().impl(), createWMLTableElementWrapper);
       map.set(templateTag.localName().impl(), createWMLTemplateElementWrapper);
       map.set(timerTag.localName().impl(), createWMLTimerElementWrapper);
    }
    CreateWMLElementWrapperFunction createWrapperFunction = map.get(element->localName().impl());
    if (createWrapperFunction)
        return createWrapperFunction(exec, globalObject, element);
    return CREATE_DOM_NODE_WRAPPER(exec, globalObject, WMLElement, element.get());
}

}

#endif
